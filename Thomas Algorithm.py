# -*- coding: utf-8 -*-
"""6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/147vULKXf14lY6fEZ7QnjVHf1HflXxFQO
"""

import numpy as np
import time

def tdma(a, b, c, d):
    n = len(b)
    x = np.zeros(n)

    for i in range(1, n):
        q = a[i - 1] / b[i - 1]
        b[i] -= c[i - 1] * q
        d[i] -= d[i - 1] * q

    x[n - 1] = d[n - 1] / b[n - 1]
    for i in range(n - 2, -1, -1):
        x[i] = (d[i] - c[i] * x[i + 1]) / b[i]

    return x

def coefficient_matrix_to_diagonals(coefficient_matrix):
    n = len(coefficient_matrix)
    a = np.zeros(n - 1)
    b = np.zeros(n)
    c = np.zeros(n - 1)

    for i in range(n):
        if i != 0:
            a[i - 1] = coefficient_matrix[i][i - 1]
        b[i] = coefficient_matrix[i][i]
        if i != n - 1:
            c[i] = coefficient_matrix[i][i + 1]

    return {
        'a': a,
        'b': b,
        'c': c
    }

def solver(coefficient_matrix, right_hand_side_vector):
    diagonals = coefficient_matrix_to_diagonals(coefficient_matrix)
    return tdma(diagonals['a'], diagonals['b'], diagonals['c'], right_hand_side_vector)


n = int(input("Enter the number of dimensions (n): "))

A = np.zeros((n, n))


for i in range(n):
    if i == n - 1:
        A[i][i] = 4
    else:
        A[i][i] = 5

    if i == 0:
        A[i][i + 1] = 2  # First super-diagonal element is 2
    elif i < n - 1:
        A[i][i + 1] = -1  # Other super-diagonal elements are -1

    if i == n - 1:
        A[i][i - 1] = 2  # Last sub-diagonal element is 2
    elif i > 0:
        A[i][i - 1] = 1  # Other sub-diagonal elements are 1


min_value = 1
max_value = 100
rhs = np.random.randint(min_value, max_value + 1, size=n)


start_time_tdma = time.time()
solution_tdma = solver(A.tolist(), rhs.tolist())
end_time_tdma = time.time()


start_time_numpy = time.time()
solution_numpy = np.linalg.solve(A, rhs)
end_time_numpy = time.time()

print("\nTridiagonal Matrix A:\n", A)
print("Random Right-hand Side Vector rhs:", rhs)
print("Solution Vector x (Thomas algorithm):", solution_tdma)
print("Solution Vector x (NumPy's solver):", solution_numpy)

print(f"Runtime of Thomas algorithm: {end_time_tdma - start_time_tdma:.6f} seconds")
print(f"Runtime of NumPy's built-in solver: {end_time_numpy - start_time_numpy:.6f} seconds")