# -*- coding: utf-8 -*-
"""5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zj4dahgkK3kf2HmB4cLgCvIkPeKIzXVE
"""

import time
import numpy as np


A = np.array([
    [4, -1, 0, 0, 0, -1],
    [-1, 4, -1, 0, 0, 0],
    [0, -1, 4, -1, 0, 0],
    [0, 0, -1, 4, -1, 0],
    [0, 0, 0, -1, 4, -1],
    [-1, 0, 0, 0, -1, 4]
])


def gaussian_elimination(A, b):
    n = len(A)
    augmented_matrix = np.hstack([A, b.reshape(-1, 1)]).astype(float)
    for i in range(n):
        current_column = augmented_matrix[i:, i]

        max_row = np.argmax(np.abs(current_column)) + i
        augmented_matrix[[i, max_row]] = augmented_matrix[[max_row, i]]  # Swap rows

        for j in range(i + 1, n):
            ratio = augmented_matrix[j, i] / augmented_matrix[i, i]
            augmented_matrix[j, i:] -= ratio * augmented_matrix[i, i:]

    x = np.zeros(n)
    for i in range(n - 1, -1, -1):
        x[i] = (augmented_matrix[i, -1] - np.dot(augmented_matrix[i, i + 1:n], x[i + 1:n])) / augmented_matrix[i, i]

    return x


def lu_decomposition(A, b=None):
    n = A.shape[0]
    L = np.zeros((n, n)).astype(float)
    U = np.zeros((n, n)).astype(float)

    for i in range(n):
        for k in range(i, n):
            U[i, k] = A[i, k] - sum(L[i, j] * U[j, k] for j in range(i))

        L[i, i] = 1
        for k in range(i + 1, n):
            L[k, i] = (A[k, i] - sum(L[k, j] * U[j, i] for j in range(i))) / U[i, i]

    if b is not None:
        y = np.zeros(n)
        for i in range(n):
            y[i] = b[i] - sum(L[i, j] * y[j] for j in range(i))
        x = np.zeros(n)
        for i in range(n - 1, -1, -1):
            x[i] = (y[i] - sum(U[i, j] * x[j] for j in range(i + 1, n))) / U[i, i]

        return x
    return L, U


def generate_random_vectors(n=100000, size=6):
    return np.random.choice(np.arange(1, 10), size=(n, size))


b_vectors = generate_random_vectors()


start_gaussian = time.time()
results_gaussian = np.array([gaussian_elimination(A, b) for b in b_vectors])
time_gaussian = time.time() - start_gaussian
start_lu = time.time()
results_lu = np.array([lu_decomposition(A, b) for b in b_vectors])
time_lu = time.time() - start_lu

print(f"Time for Gaussian Elimination: {time_gaussian} seconds")
print(f"Time for LU Decomposition: {time_lu} seconds")